[gd_scene load_steps=9 format=3 uid="uid://c0ci8rnlg2lwe"]

[ext_resource type="Texture2D" uid="uid://bx0fsn3w6t35a" path="res://demonite_idle1.png" id="1_x3e4l"]
[ext_resource type="Texture2D" uid="uid://cw04ljy6ye5mj" path="res://demonite_idle3.png" id="2_tj1yi"]
[ext_resource type="Texture2D" uid="uid://cu6nb18u857r5" path="res://demonite_idle2.png" id="3_63mtt"]
[ext_resource type="Texture2D" uid="uid://d1bbwhcspj627" path="res://demonite_moving_right1.png" id="4_f1ch0"]
[ext_resource type="Texture2D" uid="uid://bjdfmky03voyc" path="res://demonite_moving_right2.png" id="5_y5b51"]

[sub_resource type="GDScript" id="GDScript_prqq1"]
resource_name = "player.gd"
script/source = "extends Area2D

@export var speed = 1 # How fast the player will move (pixels/sec).
@export var player_size: Vector2i = Vector2i(48	, 48)
@onready var _MainWindow: Window = get_window()
@onready var animation_selector = 0
var start_playable_area = DisplayServer.screen_get_position() #First pixel at the top left
var last_position = _MainWindow
var screen_size # Size of the game window
var sticked_side = false
var sticked_top  = false
# Called when the node enters the scene tree for the first time.
var maximum_window_size = DisplayServer.screen_get_size() #Last pixel at the bottom right
var true_position #mainly for debugging
var total_maximum_window_size #also mainly for debugging
var decide_stick #pet decides if he wants to stick or not
var swap_cooldown = false #Sets a cooldown for sticking to screen sides horizontall
var swap_direction_cooldown = true #Incase the pet tries to walk towards the limit closest to the side it swapped on
var far_x_limit 
var close_x_limit
var close_y_limit
var far_y_limit
var starting_y_position
var pet_play_area_y
var pet_play_area_x
var sprite_position_x = 24
var sprite_position_y = 48 
func _ready():
	#screen_size = get_viewport_rect().size
	get_tree().get_root().set_transparent_background(true)
	
	total_maximum_window_size = start_playable_area + maximum_window_size #The sum of starting pixel and ending pixel
	
	#far_x_limit = total_maximum_window_size - (Vector2i(player_size)/5)  - ((Vector2i(player_size)+Vector2i(player_size)/1))
	far_x_limit = total_maximum_window_size - player_size
	close_x_limit = (DisplayServer.screen_get_position())
	
	close_y_limit = start_playable_area #just for easier naming
	far_y_limit = Vector2(maximum_window_size.x, close_y_limit.y)
	
	pet_play_area_y = total_maximum_window_size.y -  get_taskbar_height()
	pet_play_area_x = total_maximum_window_size.x /2
	#_MainWindow.position.y = pet_play_area_y
	#_MainWindow.position.x = pet_play_area_x
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	#_MainWindow.set_canvas_cull_mask_bit(1, false)
	var velocity = Vector2.ZERO # The player's movement vector.
	if animation_selector ==  0 and sticked_side == false:
		$AnimatedSprite2D.animation = \"idle\"
	if animation_selector == 2 and sticked_side == false and sticked_top == false:
		velocity.x += 1
	if animation_selector == 1 and sticked_side == false and sticked_top == false:
		velocity.x -= 1
	if Input.is_action_pressed(\"move_right\"):
		velocity.x += 1
	if Input.is_action_pressed(\"move_left\"):
		velocity.x -= 1
	if Input.is_action_pressed(\"move_down\"):
		velocity.y += 1
	if Input.is_action_pressed(\"move_up\"):
		velocity.y -= 1
	if (_MainWindow.position.x == far_x_limit.x or _MainWindow.position.x == close_x_limit.x) and sticked_side == false and swap_cooldown == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		print(\"Decided:\")
		print(decide_stick)
		if decide_stick == 0:
			sticked_side = false #decide against swapping sides
			print(\"no swapping\")
			if _MainWindow.position.x == close_x_limit.x:
				animation_selector = 2
			if _MainWindow.position.x == far_x_limit.x:
				animation_selector = 1
		if decide_stick == 1:
			sticked_side = true
			print(\"swapping to y axis\")
			velocity.x = 0
			velocity.y -= 1
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 90
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = -90
				$AnimatedSprite2D.flip_h = true
	if (_MainWindow.position.y == pet_play_area_y) and sticked_side == true and swap_cooldown == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		print(\"Decided:\")
		print(decide_stick)
		if decide_stick == 0:
			sticked_side = true #decide against swapping sides
			print(\"no swapping\")
			if _MainWindow.position.y == pet_play_area_y:
					animation_selector = 2
		if decide_stick == 1:
			sticked_side = false
			print(\"swapping to x axis\")
			velocity.y = 0
			velocity.x -= 1
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 0
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 0
				$AnimatedSprite2D.flip_h = true
	if _MainWindow.position.x == far_x_limit.x and sticked_side == true and _MainWindow.position.y > pet_play_area_y and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
	if _MainWindow.position.x == close_x_limit.x and sticked_side == true and _MainWindow.position.y > pet_play_area_y and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
	if _MainWindow.position.x == close_x_limit.x and sticked_side == false and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
	if _MainWindow.position.x == far_x_limit.x and sticked_side == false and animation_selector == 2 and swap_direction_cooldown == true:
		animation_selector = 1
		$Timer3.start()
		swap_direction_cooldown = false
		
#This controls the Top left corner swapping
	if (_MainWindow.position == close_x_limit) and _MainWindow.position.y == close_y_limit.y and sticked_side == true and swap_cooldown == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		print(\"Decided:\")
		print(decide_stick)
		if decide_stick == 0:
			sticked_side = true #decide against swapping sides
			print(\"no swapping\")
			if _MainWindow.position.y == pet_play_area_y:
					animation_selector = 1
		if decide_stick == 1:
			sticked_side = false
			sticked_top = true
			print(\"swapping to x axis\")
			velocity.y = 0
			velocity.x -= 1
			sprite_position_y = 24
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 180
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = -180
				$AnimatedSprite2D.flip_h = false
				
	#if animation_selector ==  0 and sticked_side == true:
		#$AnimatedSprite2D.animation = \"idle\"
	if animation_selector == 2 and sticked_side == true:
		velocity.y -= 1
	if animation_selector == 1 and sticked_side == true:
		velocity.y += 1
	#if animation_selector ==  0 and sticked_side == true:
		#$AnimatedSprite2D.animation = \"idle\"
	if animation_selector == 2 and sticked_top == true:
		velocity.x += 1 
		
	if animation_selector == 1 and sticked_top == true:
		velocity.x -= 1
		
	if velocity.length() > 0:
		velocity = velocity.normalized() * speed
		$AnimatedSprite2D.play()
	true_position = _MainWindow.position - DisplayServer.screen_get_position()
	position += velocity * delta															#Vector2(player_size * 4)))
	#print(position)
	#position = position.clamp(Vector2(player_size/2), Vector2(Vector2(_MainWindow.position) - Vector2(_MainWindow.min_size)))
	#position = position.clamp(_MainWindow.position, Vector2(_MainWindow.position) - Vector2(_MainWindow.min_size/3)) 
	position = position.clamp(Vector2(sprite_position_x,24), Vector2(sprite_position_x, sprite_position_y))
	last_position = _MainWindow.position
	_MainWindow.position = last_position + Vector2i((velocity*speed)*1.)
	_MainWindow.position = _MainWindow.position.clamp(close_x_limit , far_x_limit)

	if velocity.x != 0 and sticked_top == false:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_v = false
		$AnimatedSprite2D.flip_h = velocity.x < 0
	if velocity.x != 0 and sticked_top == true:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_v = false
		$AnimatedSprite2D.flip_h = velocity.x > 0
	if velocity.y != 0:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_h = velocity.y > 0
		$AnimatedSprite2D.flip_h = velocity.y < 0
	if _MainWindow.position.x == far_x_limit.x and velocity.y !=0:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_h = velocity.y < 0
		$AnimatedSprite2D.flip_h = velocity.y > 0
		
		
	#if _MainWindow.position.x ==  1366 and sticked_side == true and swap_cooldown:
	#elif velocity.y != 0 and velocity.y < 0:
	#	$AnimatedSprite2D.animation = \"up\"
#	elif velocity.y != 0 and velocity.y > 0:
#		$AnimatedSprite2D.animation = \"fall\"
	if velocity.x == 0 and velocity.y == 0:
		$AnimatedSprite2D.animation = \"idle\"
	#print(true_position)
	#print(_MainWindow.position)
	#print(position)
	#print(_MainWindow.position / Vector2i(position))
	#print(pet_play_area_y)
	#print(pet_play_area_y)
	#print(player_size.y/3)
	#print(total_maximum_window_size)
	#print(DisplayServer.screen_get_usable_rect())
	#print(DisplayServer.screen_get_size())
	#print(DisplayServer.screen_get_position())
	#print(far_y_limit)
	#print(close_x_limit)
	#print(Vector2(player_size/2))
	#print(Vector2(player_size * 4))
	#print(Vector2(Vector2(_MainWindow.position) - Vector2(player_size * 4)))
func _on_timer_timeout() -> void:
	animation_selector = floor(randf_range(0,3))
	print(animation_selector)
func get_taskbar_height(): #from https://www.reddit.com/r/godot/comments/s5rjsv/is_there_a_way_to_get_taskbar_height_on_windows/
	return (total_maximum_window_size.y - DisplayServer.screen_get_usable_rect().size.y - DisplayServer.screen_get_position().y) + player_size.y/1 + player_size.y/3
func _on_timer_2_timeout() -> void:
	swap_cooldown = false
	pass # Replace with function body.

func _on_timer_3_timeout() -> void:
	swap_direction_cooldown = true
	pass # Replace with function body.
"

[sub_resource type="SpriteFrames" id="SpriteFrames_5v4hp"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_tj1yi")
}],
"loop": true,
"name": &"fall",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_x3e4l")
}, {
"duration": 1.0,
"texture": ExtResource("2_tj1yi")
}, {
"duration": 1.0,
"texture": ExtResource("1_x3e4l")
}, {
"duration": 1.0,
"texture": ExtResource("3_63mtt")
}, {
"duration": 1.0,
"texture": ExtResource("1_x3e4l")
}, {
"duration": 1.0,
"texture": ExtResource("2_tj1yi")
}],
"loop": true,
"name": &"idle",
"speed": 1.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_63mtt")
}],
"loop": true,
"name": &"up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_f1ch0")
}, {
"duration": 1.0,
"texture": ExtResource("5_y5b51")
}],
"loop": false,
"name": &"walk",
"speed": 10.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ghulo"]
size = Vector2(46, 45)

[node name="Player" type="Area2D"]
visibility_layer = 3
position = Vector2(63, 40)
script = SubResource("GDScript_prqq1")
metadata/_edit_group_ = true

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_5v4hp")
animation = &"walk"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 1.5)
shape = SubResource("RectangleShape2D_ghulo")

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
autostart = true

[node name="Timer2" type="Timer" parent="."]

[node name="Timer3" type="Timer" parent="."]

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
[connection signal="timeout" from="Timer2" to="." method="_on_timer_2_timeout"]
[connection signal="timeout" from="Timer3" to="." method="_on_timer_3_timeout"]
