[gd_scene load_steps=11 format=3 uid="uid://c0ci8rnlg2lwe"]

[ext_resource type="Texture2D" uid="uid://5c61kx2gpn4v" path="res://images/demonite_float_correct.png" id="1_m4o18"]
[ext_resource type="Texture2D" uid="uid://1df7mubdwqvu" path="res://images/demonite_idle3.png" id="2_yb66m"]
[ext_resource type="Texture2D" uid="uid://oai8m2n7mr04" path="res://images/demonite_idle1.png" id="3_km3c6"]
[ext_resource type="Texture2D" uid="uid://b0jgiftwn1uyq" path="res://images/demonite_idle2.png" id="4_4vrd6"]
[ext_resource type="Texture2D" uid="uid://b08dhbcyq5u5k" path="res://images/demonite_moving_right1.png" id="5_0yynw"]
[ext_resource type="Texture2D" uid="uid://y8p0c3mh88hp" path="res://images/demonite_moving_right2.png" id="6_htvtp"]
[ext_resource type="Texture2D" uid="uid://nmx5pirff2wn" path="res://images/heart_heart.png" id="7_s56rn"]

[sub_resource type="GDScript" id="GDScript_prqq1"]
resource_name = "player.gd"
script/source = "extends Area2D

@export var speed = 1 # How fast the player will move (pixels/sec) <- pretty sure this is not per second but ok
@export var player_size: Vector2i = Vector2i(48	, 48)
@onready var _MainWindow: Window = get_window() #Creates the window that will move later
@onready var animation_selector = 0 #Starts the animation on iddle ( pretty sure this does nothing actually bc Idle is determined by speed
var start_playable_area = DisplayServer.screen_get_position(DisplayServer.get_keyboard_focus_screen()) #First pixel at the top left
var last_position = _MainWindow
var sticked_side = false
var sticked_top  = false
var sticked_bottom = false
var maximum_window_size = DisplayServer.screen_get_size(DisplayServer.get_keyboard_focus_screen()) #Last pixel at the bottom right
var true_position #mainly for debugging then later on for mouse position
var total_maximum_window_size #also mainly for debugging
var decide_stick #pet decides if it wants to stick or not
var swap_cooldown = false #Sets a cooldown for sticking to screen sides horizontally
var swap_direction_cooldown = true #Incase the pet tries to walk towards the limit closest to the side it swapped on
var far_x_limit 
var close_x_limit
var close_y_limit
var far_y_limit
var starting_y_position #the very first pixel of the screen
var pet_play_area_y
var pet_play_area_x
var sprite_position_x = 24
var sprite_position_y = 48 
var falling_sprite_position_y = 24 #When the charcter moves at certain points the sprite localtion changes inside of the game window, this is what its used for
var dragging = false #character state is being dragged by the mouse
var snapshot: Vector2  #used for snapshotting character y position when dragged
var falling = false #Character state is falling
var draggable = false #Starts the character before any action by the user can be done
var discover_if_taskbar = 0 #This will be used later to discover if the OS has a taskbar or not
var falling_gravity = 0.89
var x_speed_array = [] #This variable and the one below will be used to calculate the dragging and throwing physics
var y_speed_array = []
var flinging = false #Character state after it was dropped with enough speed and force
var flinging_velocity_x = 0 #Force stored durinng dragging action
var flinging_velocity_y = 0
var dragged_long = false #So the character doesnt reuse previos drag physics 
var heart_visible = false 
var heart_rotate = false
@onready var falling_velocity: Vector2
func _ready():
	DisplayServer.window_set_current_screen(DisplayServer.get_keyboard_focus_screen()) #selects screen
	_MainWindow.current_screen = DisplayServer.get_keyboard_focus_screen() #selects screen 
	get_tree().get_root().set_transparent_background(true) 
	$Window/Sprite2D.modulate.a8 = 100 #sets heart opacity
	$Timer4.start()
	
	total_maximum_window_size = start_playable_area + maximum_window_size #The sum of starting pixel and ending pixel
	
	far_x_limit = total_maximum_window_size - player_size
	close_x_limit = (DisplayServer.screen_get_position(DisplayServer.get_keyboard_focus_screen()))
	
	close_y_limit = start_playable_area #just for easier naming
	far_y_limit = Vector2(maximum_window_size.x, close_y_limit.y) #top right corner

	pet_play_area_y = total_maximum_window_size.y -  get_taskbar_height()
	discover_if_taskbar = pet_play_area_y + sprite_position_y - 7 #If there is a taskbar, this variable's value wil lbe lower on the y axis (AKA higher up on the scree)
	pet_play_area_x = total_maximum_window_size.x /2
	_MainWindow.position.y = pet_play_area_y
	_MainWindow.position.x = pet_play_area_x
	sticked_bottom = true
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	set_passthrough(position) #Lets you click through the character
	var velocity = Vector2.ZERO # The player's movement vector.
	if animation_selector == 0 and sticked_side == false and falling == false:
		$AnimatedSprite2D.animation = \"idle\"
	if animation_selector == 2 and sticked_side == false and sticked_top == false:
		velocity.x += 1
	if animation_selector == 1 and sticked_side == false and sticked_top == false:
		velocity.x -= 1

#Controls the bottom left and right corner swapping
	if (_MainWindow.position.x == far_x_limit.x or _MainWindow.position.x == close_x_limit.x) and _MainWindow.position.y != 0 and sticked_side == false and swap_cooldown == false and sticked_top == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		if decide_stick == 0:
			sticked_side = false #decide against swapping sides
			if _MainWindow.position.x == close_x_limit.x and sticked_side == false and dragging == false and falling == false:
				animation_selector = 2
			if _MainWindow.position.x == far_x_limit.x and sticked_side == false and dragging == false and falling == false:
				animation_selector = 1
		if decide_stick == 1:
			sticked_side = true
			sticked_bottom = false
			dragging = false
			animation_selector = 0
			velocity.x = 0
			velocity.y -= 1
			sprite_position_y = 48
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 90
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = -90
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
				$AnimatedSprite2D.flip_h = true
# this controls side swapping to bottom
	if (_MainWindow.position.y >= pet_play_area_y) and sticked_side == true and swap_cooldown == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		if decide_stick == 0:
			sticked_side = true #decide against swapping sides
			if _MainWindow.position.y == pet_play_area_y:
					animation_selector = 2
		if decide_stick == 1:
			sticked_side = false
			sticked_bottom = true
			sticked_top = false
			dragging = false
			velocity.y = 0
			velocity.x -= 1
			sprite_position_y = 48 - 7
			if discover_if_taskbar > pet_play_area_y:
					position.y = sprite_position_y + 7
			else:
					position.y = sprite_position_y 
			position.y = sprite_position_y
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 0
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 0
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
				$AnimatedSprite2D.flip_h = true
				
	#This starts direction for corners
			#This is for right side corner, ontop of the taskbar
	if _MainWindow.position.x == far_x_limit.x and sticked_side == true and _MainWindow.position.y > pet_play_area_y and (_MainWindow.position.y != close_y_limit.y) and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
			#This is for left side corner, ontop of taskbar
	if _MainWindow.position.x == close_x_limit.x and sticked_side == true and _MainWindow.position.y > pet_play_area_y and (_MainWindow.position.y != close_y_limit.y) and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
			#This is for bottom left corner, where the side starts
	if _MainWindow.position.x == close_x_limit.x and sticked_side == false and animation_selector == 1 and swap_direction_cooldown == true:
		animation_selector = 2
		$Timer3.start()
		swap_direction_cooldown = false
			#This is for far bottom corner, where the side starts
	if _MainWindow.position.x == far_x_limit.x and sticked_side == false and sticked_top == false and animation_selector == 2 and swap_direction_cooldown == true:
		animation_selector = 1
		$Timer3.start()
		swap_direction_cooldown = false
			#This is for top corners, if the character is sticked to the wall
	if (_MainWindow.position.y <= close_y_limit.y or _MainWindow.position.y <= far_y_limit.y) and (_MainWindow.position.x == close_x_limit.x or _MainWindow.position.x == far_x_limit.x) and sticked_side == true and sticked_top == false and swap_direction_cooldown == true:
		animation_selector = 1
		$Timer3.start()
		swap_direction_cooldown = false
			#This is for top right corner if the character is sticked to the top
	if (_MainWindow.position.y == close_y_limit.y or _MainWindow.position.y == far_y_limit.y) and _MainWindow.position.x == far_x_limit.x and sticked_side == false and sticked_top == true and swap_direction_cooldown == true:
		animation_selector = 1
		$Timer3.start()
		swap_direction_cooldown = false
		
#This controls the Top left corner swapping
	if  _MainWindow.position.y == 0  and swap_cooldown == false and sticked_top == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		if decide_stick == 0 and flinging == false:
			sticked_side = true #decide against swapping sides
			if _MainWindow.position.y == start_playable_area.y:
					animation_selector = 1
		if decide_stick == 1:
			sticked_side = false
			sticked_top = true
			sticked_bottom = false
			dragging = false
			animation_selector = 0
			velocity.y = 0
			velocity.x -= 1
			sprite_position_y = 24
			if _MainWindow.position.y == close_y_limit.y:
				$AnimatedSprite2D.rotation_degrees = 180
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
			elif _MainWindow.position.y == far_y_limit.y:
				$AnimatedSprite2D.rotation_degrees = -180
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
				$AnimatedSprite2D.flip_h = false
				
#Controls swapping top_right from top to side
	if (_MainWindow.position.x == far_x_limit.x or _MainWindow.position.x == close_x_limit.x) and _MainWindow.position.y == far_y_limit.y and sticked_side == false and swap_cooldown == false:
		$Timer2.start()
		swap_cooldown = true
		decide_stick = floor(randf_range(0,2))
		if decide_stick == 0:
			sticked_side = false #decide against swapping sides
			if _MainWindow.position.y == far_y_limit.y and sticked_top == true:
					animation_selector = 1
		if decide_stick == 1:
			sticked_side = true
			sticked_top = false
			dragging = false
			animation_selector = 0
			velocity.y = 1
			velocity.x = 0
			sprite_position_y = 48
			if _MainWindow.position.x == close_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = 90
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
			elif _MainWindow.position.x == far_x_limit.x:
				$AnimatedSprite2D.rotation_degrees = -90
				$Window/Sprite2D.rotation = $AnimatedSprite2D.rotation
				$AnimatedSprite2D.flip_h = false		
	if animation_selector == 2 and sticked_side == true and sticked_top == false:
		velocity.y -= 1
	if animation_selector == 1 and sticked_side == true and sticked_top == false:
		velocity.y += 1
	if animation_selector == 2 and sticked_top == true and sticked_side == false:
		velocity.x += 1 
	if animation_selector == 1 and sticked_top == true and sticked_side == false:
		velocity.x -= 1
	if animation_selector == 2 and sticked_side == false and sticked_top == false:
		velocity.x += 1
	
		
	if velocity.length() > 0:
		velocity = velocity.normalized() * speed
		$AnimatedSprite2D.play()
	true_position = _MainWindow.position - start_playable_area
	
	
	if heart_visible == true:
		$Window/Sprite2D.modulate.a8 = $Window/Sprite2D.modulate.a8 + 5
		
		#heart while on bottom
		if $Window/Sprite2D.rotation_degrees == 10:
			heart_rotate = true
		if $Window/Sprite2D.rotation_degrees == -10:
			heart_rotate = false
		if $Window/Sprite2D.rotation_degrees <= 10 and heart_rotate == false:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees + 1
		if $Window/Sprite2D.rotation_degrees >= -10 and heart_rotate == true:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees - 1
			
		#heart while on left side
		if $Window/Sprite2D.rotation_degrees == 100 and sticked_side == true:
			heart_rotate = true
		if $Window/Sprite2D.rotation_degrees <= 80 and $Window/Sprite2D.rotation_degrees > 0 and sticked_side == true and heart_rotate == true:
			heart_rotate = false
		if $Window/Sprite2D.rotation_degrees <= 100 and heart_rotate == false:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees + 1
		if $Window/Sprite2D.rotation_degrees >= 80 and heart_rotate == true:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees - 1	
			
		#heart while on right side
		if $Window/Sprite2D.rotation_degrees >= -80 and $Window/Sprite2D.rotation_degrees < 0 and sticked_side == true:
			heart_rotate = true
		if $Window/Sprite2D.rotation_degrees == -100:
			heart_rotate = false
		if $Window/Sprite2D.rotation_degrees < -80 and heart_rotate == false:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees + 1
		if $Window/Sprite2D.rotation_degrees > -100 and heart_rotate == true:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees - 1
		
		#heart while on top
		if $Window/Sprite2D.rotation_degrees == 190:
			heart_rotate = true
		if $Window/Sprite2D.rotation_degrees == 170:
			heart_rotate = false
		if $Window/Sprite2D.rotation_degrees <= 190 and heart_rotate == false and sticked_top == true:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees + 1
		if $Window/Sprite2D.rotation_degrees >= 170 and heart_rotate == true and sticked_top == true:
			$Window/Sprite2D.rotation_degrees = $Window/Sprite2D.rotation_degrees - 1
	if heart_visible == false:
		$Window/Sprite2D.rotation_degrees = $AnimatedSprite2D.rotation_degrees
		
	# Mouse click controls
	if Input.is_action_just_pressed(\"right_click\") and dragging == false and flinging == false and falling == false and heart_visible == false:
		$Window.show()
		$Timer6.start()
		heart_visible = true
		animation_selector = 0
	if Input.is_action_just_pressed(\"click\") and draggable == true:
		dragging = true
		flinging = false
		$Timer5.start()
		clear_state()
	if Input.is_action_pressed(\"click\") and draggable == true and dragging == true and flinging == false:
		append_array_x(_MainWindow.position.x)
		append_array_y(_MainWindow.position.y)
		clear_state()
		flinging = false
		_MainWindow.position = Vector2(true_position) + get_global_mouse_position()-Vector2(28,18) + Vector2(start_playable_area)
	if Input.is_action_just_released(\"click\") and draggable == true and dragging == true:
		sprite_position_y = 48
		dragging = false
		flinging = false
		falling_velocity.y = velocity.y
		$AnimatedSprite2D.rotation = 0
		animation_selector = 0
		if (calculate_x_acceleration() != 0 or calculate_y_acceleration() != 0) and (x_speed_array.size() == 10 or y_speed_array.size() == 10) and flinging == false and dragged_long == true:
			dragged_long = false
			if calculate_x_acceleration() != 0:
				flinging_velocity_x = calculate_x_acceleration()
			if calculate_y_acceleration() != 0:
				flinging_velocity_y = calculate_y_acceleration() 
			flinging = true
	if sticked_side == false:
		if sticked_top == false:
			if sticked_bottom == false:
				falling = true
		else: 
			falling = false
	else:
		falling = false
	if flinging == true:
		x_speed_array.clear()
		y_speed_array.clear()
		if flinging_velocity_x > 0:	
			flinging_velocity_x = floor(calculate_x_velocity())
			velocity.x = flinging_velocity_x
			if flinging_velocity_x/2  < falling_velocity.y/2:
				flinging_velocity_x = 0 		
		if flinging_velocity_x < 0:
			flinging_velocity_x = round(calculate_x_velocity())
			velocity.x = flinging_velocity_x
			if flinging_velocity_x/2  > -8/2:
				flinging_velocity_x = 0
		if flinging_velocity_y > 0:
			falling_velocity.y = round(calculate_y_velocity())
			flinging_velocity_y = flinging_velocity_y - falling_velocity.y
			velocity.y = floor(flinging_velocity_y)
			if flinging_velocity_y < falling_velocity.y:
				flinging_velocity_y = 0
		if flinging_velocity_y < 0:
			falling_velocity.y = round(calculate_y_velocity() * 0.85)
			flinging_velocity_y = flinging_velocity_y + falling_velocity.y
			velocity.y = floor(flinging_velocity_y)
			if flinging_velocity_y > -falling_velocity.y:
				flinging_velocity_y = 0
	#checks if no longer dragging or being flung, then applies falling controls
	if (sticked_top == true or sticked_bottom == true or sticked_side == true) and flinging == true:
		flinging = false
		flinging_velocity_x = 0
		velocity.x = 0
		flinging_velocity_y = 0
		velocity.y = 0
	if flinging_velocity_x == 0 and flinging_velocity_y == 0 and flinging == true:
		flinging = false
		flinging_velocity_x = 0
		velocity.x = 0
		flinging_velocity_y = 0
		velocity.y = 0
		falling = true
	if falling == true and dragging == false and flinging == false:
		falling_velocity.y = (falling_velocity.y * falling_gravity) + (1 *falling_gravity)
		velocity.y = round(falling_velocity.y)
		sprite_position_y = 24
		if discover_if_taskbar > pet_play_area_y:
			if _MainWindow.position.y == pet_play_area_y and falling == true:
				falling = false
				sticked_bottom = true
				$AnimatedSprite2D.rotation =0
				velocity.y = 0
				sprite_position_y = 48-7
				position.y = sprite_position_y
			elif _MainWindow.position.y == discover_if_taskbar and falling == true: 
				falling = false
				sticked_bottom = true
				velocity.y = 0
				$AnimatedSprite2D.rotation = 0
				sprite_position_y = 48
				
	#This controls the character movement, then updates the window to fllow the character, makign sure everything stays in its relative place to the middle pixel of the character sprite
	position += velocity * delta	
	position = position.clamp(Vector2(sprite_position_x,24), Vector2(sprite_position_x, sprite_position_y))
	last_position = _MainWindow.position
	_MainWindow.position = last_position + Vector2i((velocity*speed)*1.)
	_MainWindow.position = _MainWindow.position.clamp(close_x_limit , far_x_limit)
	if heart_visible == false:
		$Window.position = _MainWindow.position
		
	#the follwoing determine if the character positions is past the maximum y axis value (pet play area), if it is, it resets that value to the maximum, it also checks if the desktop has a taskbar or not 
	if discover_if_taskbar > pet_play_area_y:
		if _MainWindow.position.y > pet_play_area_y:
			_MainWindow.position.y = pet_play_area_y
	elif _MainWindow.position.y == discover_if_taskbar: 
		if _MainWindow.positiong.y > discover_if_taskbar:
			_MainWindow.position.y = discover_if_taskbar 
			clear_state()
	
	#Selects the animations, mainly based off of direction and speed
	if velocity.x != 0 and sticked_top == false:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_v = false
		$AnimatedSprite2D.flip_h = velocity.x < 0
	if velocity.x != 0 and sticked_top == true:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_v = false
		$AnimatedSprite2D.flip_h = velocity.x > 0
	if velocity.y != 0 and falling == false:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_h = velocity.y > 0
		$AnimatedSprite2D.flip_h = velocity.y < 0
	if _MainWindow.position.x == far_x_limit.x and velocity.y !=0:
		$AnimatedSprite2D.animation = \"walk\"
		$AnimatedSprite2D.flip_h = velocity.y < 0
		$AnimatedSprite2D.flip_h = velocity.y > 0
	if velocity.x == 0 and velocity.y == 0 and falling == false:
		$AnimatedSprite2D.animation = \"idle\"
	if velocity.y > 0  and falling == true and dragging == false:
		$AnimatedSprite2D.animation = \"falling\"
	if dragging == true:
		$AnimatedSprite2D.animation = \"fall\"
	if heart_visible == true:
		$AnimatedSprite2D.animation = \"falling\"
#This area is dedicated to functions, im not actually why godot places them down here, but here they are and here they stay
func _on_timer_timeout() -> void:
	if falling == false and dragging == false and heart_visible == false:
		animation_selector = floor(randf_range(0,3))
		
func get_taskbar_height(): #idea from https://www.reddit.com/r/godot/comments/s5rjsv/is_there_a_way_to_get_taskbar_height_on_windows/
	return (total_maximum_window_size.y - DisplayServer.screen_get_usable_rect(DisplayServer.get_keyboard_focus_screen()).size.y - DisplayServer.screen_get_position(DisplayServer.get_keyboard_focus_screen()).y) + player_size.y/1 + player_size.y/3

#Timer before character can attempt to swap between orientation axis
func _on_timer_2_timeout() -> void:
	swap_cooldown = false
	pass 
#Timer before the character can attempt to swamp orientation withing the same axis
func _on_timer_3_timeout() -> void:
	swap_direction_cooldown = true
	pass 

#Sets the coordinates for hitbox, then sets everything outside of that hitbox as non clickable
func set_passthrough(sprite: Vector2):
	#idea from https://medium.com/@chewedgumah/godot-4-partially-clickthrough-window-with-transparent-background-3de637cdf95b
	var texture_corners: PackedVector2Array = [
		position - Vector2(29,24), # Top left corner
		position + Vector2(24, 0) - Vector2(0, 24), # Top right corner
		position + Vector2(24, 0) + Vector2(0, 24), # Bottom right corner
		position - Vector2(24, 0) + Vector2(0, 24) ] # Bottom left corne
	DisplayServer.window_set_mouse_passthrough(texture_corners)

#Resets character status
func clear_state() -> void:
		$AnimatedSprite2D.flip_h = false
		$AnimatedSprite2D.flip_v = false
		sticked_top = false
		sticked_side = false
		sticked_bottom = false
		flinging = false
	

#Sets the timer before the character is interactible
func _on_timer_4_timeout() -> void:
	draggable = true

#The following functions are used to determine Fling force, speed and direction
func append_array_x(read_x: int):
	x_speed_array.append(read_x)
	if x_speed_array.size() == 11:
		x_speed_array.pop_front()
func append_array_y(read_y: int):
	y_speed_array.append(read_y)
	if y_speed_array.size() == 11:
		y_speed_array.pop_front()
func calculate_x_acceleration():
	if x_speed_array.size() >= 10:
		return (x_speed_array[9] - x_speed_array[0]) / 10
func calculate_y_acceleration():
	if y_speed_array.size() >= 10:
		return (y_speed_array[9] - y_speed_array[0]) /10
func calculate_x_velocity():
	return flinging_velocity_x * 0.90
func calculate_y_velocity():
	return (falling_velocity.y * falling_gravity) + (1 *falling_gravity)

#if the character is being dragged past this point, enough force has been stored for the chracter to be potentially flung by the values from the functions above
func _on_timer_5_timeout() -> void:
	dragged_long = true

#This timer controls the heart pet function
func _on_timer_6_timeout() -> void:
	heart_visible = false
	$Window.hide()
	$Window/Sprite2D.modulate.a8 = 100
	heart_rotate = false
"

[sub_resource type="SpriteFrames" id="SpriteFrames_5v4hp"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_m4o18")
}],
"loop": true,
"name": &"fall",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_yb66m")
}],
"loop": true,
"name": &"falling",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_km3c6")
}, {
"duration": 1.0,
"texture": ExtResource("2_yb66m")
}, {
"duration": 1.0,
"texture": ExtResource("3_km3c6")
}, {
"duration": 1.0,
"texture": ExtResource("4_4vrd6")
}, {
"duration": 1.0,
"texture": ExtResource("3_km3c6")
}, {
"duration": 1.0,
"texture": ExtResource("2_yb66m")
}],
"loop": true,
"name": &"idle",
"speed": 1.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_4vrd6")
}],
"loop": true,
"name": &"up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_0yynw")
}, {
"duration": 1.0,
"texture": ExtResource("6_htvtp")
}],
"loop": false,
"name": &"walk",
"speed": 10.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ghulo"]
size = Vector2(46, 45)

[node name="Player" type="Area2D"]
visibility_layer = 3
position = Vector2(63, 40)
script = SubResource("GDScript_prqq1")
metadata/_edit_group_ = true

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_5v4hp")
animation = &"walk"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 1.5)
shape = SubResource("RectangleShape2D_ghulo")

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
autostart = true

[node name="Timer2" type="Timer" parent="."]

[node name="Timer3" type="Timer" parent="."]

[node name="Timer4" type="Timer" parent="."]

[node name="Timer5" type="Timer" parent="."]

[node name="Timer6" type="Timer" parent="."]
wait_time = 2.0

[node name="Window" type="Window" parent="."]
transparent_bg = true
size = Vector2i(48, 40)
visible = false
transient = true
transient_to_focused = true
exclusive = true
unresizable = true
borderless = true
always_on_top = true
transparent = true
unfocusable = true
popup_window = true

[node name="Sprite2D" type="Sprite2D" parent="Window"]
position = Vector2(24, 24)
texture = ExtResource("7_s56rn")

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
[connection signal="timeout" from="Timer2" to="." method="_on_timer_2_timeout"]
[connection signal="timeout" from="Timer3" to="." method="_on_timer_3_timeout"]
[connection signal="timeout" from="Timer4" to="." method="_on_timer_4_timeout"]
[connection signal="timeout" from="Timer5" to="." method="_on_timer_5_timeout"]
[connection signal="timeout" from="Timer6" to="." method="_on_timer_6_timeout"]
